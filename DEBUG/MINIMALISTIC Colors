--// ===================================================
--//   AUTO AIM BASKETBALL SHOOTER (CLICK TO SHOOT)
--//   True moving re-align: aim adjusts to rim while moving
--//   Rim dots remain perfectly static
--//   + Color-coded Vector3 Logger (auto-scrolls)
--// ===================================================

local Players = game:GetService('Players')
local UserInputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local CoreGui = game:GetService('CoreGui')
local Camera = workspace.CurrentCamera

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local remotes = ReplicatedStorage:WaitForChild('Remotes')
local shootRemote = remotes:WaitForChild('Shoot')

local toggleOn, DotsEnabled = true, true
local shootKey, selectedRim = nil, nil

--// === Notify ===
local function notify(msg, color)
    local gui = Instance.new('ScreenGui', CoreGui)
    gui.ResetOnSpawn = false
    local label = Instance.new('TextLabel', gui)
    label.AnchorPoint = Vector2.new(0.5, 0.5)
    label.BackgroundTransparency = 1
    label.TextColor3 = color or Color3.new(1, 1, 1)
    label.Font = Enum.Font.Code
    label.TextSize = 26
    label.Text = msg
    label.Position = UDim2.new(0.5, 0, 0.9, 0)
    task.spawn(function()
        task.wait(1.5)
        gui:Destroy()
    end)
end

--// === Rim Dot ESP ===
local RimDots = {}
local RimSize =
    Vector3.new(3.632131576538086, 0.5587897300720215, 3.632131576538086)
local function addRimDot(rim)
    local dot = Drawing.new('Circle')
    dot.Radius, dot.Filled, dot.Color = 4, true, Color3.new(1, 0, 0)
    RimDots[rim] = dot
end
local function removeRimDot(rim)
    if RimDots[rim] then
        RimDots[rim]:Remove()
        RimDots[rim] = nil
    end
    if selectedRim == rim then
        selectedRim = nil
    end
end

RunService.RenderStepped:Connect(function()
    for rim, dot in pairs(RimDots) do
        if rim:IsDescendantOf(workspace) and DotsEnabled then
            local pos, on = Camera:WorldToViewportPoint(rim.Position)
            dot.Position, dot.Visible = Vector2.new(pos.X, pos.Y), on
            dot.Color = (rim == selectedRim) and Color3.new(1, 1, 0)
                or Color3.new(1, 0, 0)
            dot.Radius = (rim == selectedRim) and 6 or 4
        else
            dot.Visible = false
        end
    end
end)

workspace.DescendantAdded:Connect(function(o)
    if o:IsA('BasePart') and o.Name == 'Rim' and o.Size == RimSize then
        addRimDot(o)
    end
end)
workspace.DescendantRemoving:Connect(removeRimDot)
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA('BasePart') and v.Name == 'Rim' and v.Size == RimSize then
        addRimDot(v)
    end
end

--// === Auto Rim Lock ===
task.spawn(function()
    while task.wait(0.1) do
        if not toggleOn then
            continue
        end
        local root = plr.Character
            and plr.Character:FindFirstChild('HumanoidRootPart')
        if not root then
            continue
        end
        local bestRim, bestDist = nil, 85
        for rim in pairs(RimDots) do
            if rim:IsDescendantOf(workspace) then
                local dist = (rim.Position - root.Position).Magnitude
                if dist < bestDist then
                    local _, on = Camera:WorldToViewportPoint(rim.Position)
                    if on then
                        bestRim, bestDist = rim, dist
                    end
                end
            end
        end
        if bestRim and bestRim ~= selectedRim then
            selectedRim = bestRim
            notify('üéØ Auto-Locked Nearest Rim', Color3.fromRGB(255, 230, 0))
        end
    end
end)

--// === Toggles ===
UserInputService.InputBegan:Connect(function(i, gp)
    if gp then
        return
    end
    if i.KeyCode == Enum.KeyCode.O then
        DotsEnabled = not DotsEnabled
    elseif i.KeyCode == Enum.KeyCode.V then
        toggleOn = not toggleOn
        notify(
            toggleOn and 'System ON' or 'System OFF',
            toggleOn and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
        )
    end
end)

--// === Capture Shoot Key ===
local old
old = hookmetamethod(game, '__namecall', function(self, ...)
    local m = getnamecallmethod()
    if m == 'FireServer' and self == shootRemote then
        local args = { ... }
        if type(args[3]) == 'string' and not shootKey then
            shootKey = args[3]
            print('[Captured ShootKey]:', shootKey)
            notify('Shoot key captured!', Color3.new(0, 1, 0))
        end
    end
    return old(self, ...)
end)

--// === Moving Realign Logic ===
local lastTick, moveOffset = 0, Vector3.zero
local function computeOffset()
    if tick() - lastTick > 0.1 then
        local hum = plr.Character
            and plr.Character:FindFirstChildOfClass('Humanoid')
        local moveDir = (hum and hum.MoveDirection) or Vector3.zero
        moveOffset = Vector3.new(moveDir.X * 1.5, 0, moveDir.Z * 1.5)
        lastTick = tick()
    end
    return moveOffset
end

local function computeArc(dist)
    return Vector3.new(0, 43 + (dist / 15), 0)
end

--// === Smart Aim Function (u-style) ===
local function smartAim(rim)
    local offset = computeOffset()
    local root = plr.Character:FindFirstChild('HumanoidRootPart')
    if not root then
        return rim.Position
    end
    local dist = (root.Position - rim.Position).Magnitude
    return rim.Position + computeArc(dist) - offset
end

--// === Vector3 Logger ===
local oldGui = CoreGui:FindFirstChild('Vector3Logger')
if oldGui then
    oldGui:Destroy()
end

local gui = Instance.new('ScreenGui')
gui.Name = 'Vector3Logger'
gui.ResetOnSpawn = false
gui.Parent = CoreGui

local scroll = Instance.new('ScrollingFrame')
scroll.AnchorPoint = Vector2.new(1, 1)
scroll.Position = UDim2.new(1, -10, 1, -10)
scroll.Size = UDim2.new(0, 250, 0, 150)
scroll.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
scroll.BackgroundTransparency = 0.25
scroll.BorderSizePixel = 0
scroll.ScrollBarThickness = 4
scroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
scroll.Parent = gui

local layout = Instance.new('UIListLayout', scroll)
layout.Padding = UDim.new(0, 2)
layout.SortOrder = Enum.SortOrder.LayoutOrder

local shotCount = 0
local maxLines = 120

local function addColoredLine(x, y, z)
    local holder = Instance.new('Frame')
    holder.BackgroundTransparency = 1
    holder.Size = UDim2.new(1, 0, 0, 16)
    holder.Parent = scroll

    local labelNum = Instance.new('TextLabel')
    labelNum.Text = tostring(shotCount) .. ':'
    labelNum.Font = Enum.Font.Code
    labelNum.TextSize = 14
    labelNum.TextColor3 = Color3.fromRGB(255, 255, 255)
    labelNum.BackgroundTransparency = 1
    labelNum.Size = UDim2.new(0, 20, 1, 0)
    labelNum.TextXAlignment = Enum.TextXAlignment.Left
    labelNum.Parent = holder

    local labelX = Instance.new('TextLabel')
    labelX.Text = string.format(' X%.2f', x)
    labelX.Font = Enum.Font.Code
    labelX.TextSize = 14
    labelX.TextColor3 = Color3.fromRGB(255, 80, 80)
    labelX.BackgroundTransparency = 1
    labelX.Position = UDim2.new(0, 25, 0, 0)
    labelX.Size = UDim2.new(0, 70, 1, 0)
    labelX.TextXAlignment = Enum.TextXAlignment.Left
    labelX.Parent = holder

    local labelY = Instance.new('TextLabel')
    labelY.Text = string.format(' Y%.2f', y)
    labelY.Font = Enum.Font.Code
    labelY.TextSize = 14
    labelY.TextColor3 = Color3.fromRGB(80, 255, 80)
    labelY.BackgroundTransparency = 1
    labelY.Position = UDim2.new(0, 90, 0, 0)
    labelY.Size = UDim2.new(0, 70, 1, 0)
    labelY.TextXAlignment = Enum.TextXAlignment.Left
    labelY.Parent = holder

    local labelZ = Instance.new('TextLabel')
    labelZ.Text = string.format(' Z%.2f', z)
    labelZ.Font = Enum.Font.Code
    labelZ.TextSize = 14
    labelZ.TextColor3 = Color3.fromRGB(80, 150, 255)
    labelZ.BackgroundTransparency = 1
    labelZ.Position = UDim2.new(0, 155, 0, 0)
    labelZ.Size = UDim2.new(0, 70, 1, 0)
    labelZ.TextXAlignment = Enum.TextXAlignment.Left
    labelZ.Parent = holder

    scroll.CanvasPosition = Vector2.new(0, math.huge)
end

local function logVector(vec)
    shotCount += 1
    if #scroll:GetChildren() > maxLines then
        local oldest = scroll:FindFirstChildWhichIsA('Frame')
        if oldest then
            oldest:Destroy()
        end
    end
    addColoredLine(vec.X, vec.Y, vec.Z)
end

--// === Shoot ===
local function shootAtTarget()
    if not (selectedRim and selectedRim:IsDescendantOf(workspace)) then
        return notify('‚ùå No Target', Color3.new(1, 0.3, 0.3))
    end
    if not shootKey then
        return notify('‚öôÔ∏è Shoot Key Missing', Color3.new(1, 0.8, 0.3))
    end

    local char = plr.Character
    if not char then
        return
    end
    local head, root = char:FindFirstChild('Head'), char.PrimaryPart
    if not (head and root) then
        return
    end

    local aimPos = smartAim(selectedRim)
    local dir = (aimPos - head.Position).Unit
    local shootFrom = root.Position + dir * 3.8
    if shootFrom.Y - root.Position.Y < 4 then
        shootFrom = root.Position + dir * 4
    end

    shootRemote:FireServer(aimPos, shootFrom, shootKey)
    notify('üèÄ Shot Fired!', Color3.new(0, 1, 0))
    logVector(aimPos)
end

--// === Mouse Click Shoot ===
UserInputService.InputBegan:Connect(function(i, gp)
    if gp or not toggleOn then
        return
    end
    if i.UserInputType == Enum.UserInputType.MouseButton1 then
        shootAtTarget()
    end
end)

print('[üèÄ Auto Aim Basketball + Color Vector Logger Loaded]')
print('[V] Toggle system | [O] Toggle dots')
