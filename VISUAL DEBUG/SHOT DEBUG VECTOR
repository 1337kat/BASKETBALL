--// ===================================================
--//   AUTO AIM BASKETBALL SHOOTER (DEBUG + CALIBRATION)
--//   Predictive motion correction + visual tracer + logger
--// ===================================================

local Players = game:GetService('Players')
local UserInputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local CoreGui = game:GetService('CoreGui')
local Camera = workspace.CurrentCamera
local HttpService = game:GetService('HttpService')

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local remotes = ReplicatedStorage:WaitForChild('Remotes')
local shootRemote = remotes:WaitForChild('Shoot')

local toggleOn, DotsEnabled, DebugMode, LogMode = true, true, true, true
local shootKey, selectedRim = nil, nil

--// === Notify ===
local function notify(msg, color)
    local gui = Instance.new('ScreenGui', CoreGui)
    gui.ResetOnSpawn = false
    local label = Instance.new('TextLabel', gui)
    label.AnchorPoint = Vector2.new(0.5, 0.5)
    label.BackgroundTransparency = 1
    label.TextColor3 = color or Color3.new(1, 1, 1)
    label.Font = Enum.Font.Code
    label.TextSize = 26
    label.Text = msg
    label.Position = UDim2.new(0.5, 0, 0.9, 0)
    task.spawn(function()
        task.wait(1.5)
        gui:Destroy()
    end)
end

--// === Rim Dot ESP ===
local RimDots = {}
local RimSize =
    Vector3.new(3.632131576538086, 0.5587897300720215, 3.632131576538086)
local function addRimDot(rim)
    local dot = Drawing.new('Circle')
    dot.Radius, dot.Filled, dot.Color = 4, true, Color3.new(1, 0, 0)
    RimDots[rim] = dot
end
local function removeRimDot(rim)
    if RimDots[rim] then
        RimDots[rim]:Remove()
        RimDots[rim] = nil
    end
    if selectedRim == rim then
        selectedRim = nil
    end
end

RunService.RenderStepped:Connect(function()
    for rim, dot in pairs(RimDots) do
        if rim:IsDescendantOf(workspace) and DotsEnabled then
            local pos, on = Camera:WorldToViewportPoint(rim.Position)
            dot.Position, dot.Visible = Vector2.new(pos.X, pos.Y), on
            dot.Color = (rim == selectedRim) and Color3.new(1, 1, 0)
                or Color3.new(1, 0, 0)
            dot.Radius = (rim == selectedRim) and 6 or 4
        else
            dot.Visible = false
        end
    end
end)

workspace.DescendantAdded:Connect(function(o)
    if o:IsA('BasePart') and o.Name == 'Rim' and o.Size == RimSize then
        addRimDot(o)
    end
end)
workspace.DescendantRemoving:Connect(removeRimDot)
for _, v in ipairs(workspace:GetDescendants()) do
    if v:IsA('BasePart') and v.Name == 'Rim' and v.Size == RimSize then
        addRimDot(v)
    end
end

--// === Auto Rim Lock ===
task.spawn(function()
    while task.wait(0.1) do
        if not toggleOn then
            continue
        end
        local root = plr.Character
            and plr.Character:FindFirstChild('HumanoidRootPart')
        if not root then
            continue
        end
        local bestRim, bestDist = nil, 85
        for rim in pairs(RimDots) do
            if rim:IsDescendantOf(workspace) then
                local dist = (rim.Position - root.Position).Magnitude
                if dist < bestDist then
                    local _, on = Camera:WorldToViewportPoint(rim.Position)
                    if on then
                        bestRim, bestDist = rim, dist
                    end
                end
            end
        end
        if bestRim and bestRim ~= selectedRim then
            selectedRim = bestRim
            notify('🎯 Auto-Locked Nearest Rim', Color3.fromRGB(255, 230, 0))
        end
    end
end)

--// === Toggles ===
UserInputService.InputBegan:Connect(function(i, gp)
    if gp then
        return
    end
    if i.KeyCode == Enum.KeyCode.O then
        DotsEnabled = not DotsEnabled
    elseif i.KeyCode == Enum.KeyCode.V then
        toggleOn = not toggleOn
        notify(
            toggleOn and 'System ON' or 'System OFF',
            toggleOn and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
        )
    elseif i.KeyCode == Enum.KeyCode.B then
        DebugMode = not DebugMode
        notify(
            'Debug Tracer: ' .. (DebugMode and 'ON' or 'OFF'),
            Color3.new(0.5, 1, 1)
        )
    elseif i.KeyCode == Enum.KeyCode.L then
        LogMode = not LogMode
        notify(
            'Shot Logging: ' .. (LogMode and 'ON' or 'OFF'),
            Color3.new(1, 0.8, 0.3)
        )
    end
end)

--// === Capture Shoot Key ===
local old
old = hookmetamethod(game, '__namecall', function(self, ...)
    local m = getnamecallmethod()
    if m == 'FireServer' and self == shootRemote then
        local args = { ... }
        if type(args[3]) == 'string' and not shootKey then
            shootKey = args[3]
            print('[Captured ShootKey]:', shootKey)
            notify('Shoot key captured!', Color3.new(0, 1, 0))
        end
    end
    return old(self, ...)
end)

--// === Predictive Arch Logic ===
local function computeArc(dist, moveDir)
    local baseY = 43 + (dist / 15)
    local dirBias = Vector3.new(moveDir.X * 1.2, 0, moveDir.Z * 1.2)
    return Vector3.new(0, baseY, 0) + dirBias
end

local function smartAim(rim)
    local char = plr.Character
    if not char then
        return rim.Position
    end
    local hum = char:FindFirstChildOfClass('Humanoid')
    local root = char:FindFirstChild('HumanoidRootPart')
    if not (hum and root) then
        return rim.Position
    end

    local moveDir = hum.MoveDirection
    local speed = hum.WalkSpeed
    local vel = moveDir * speed
    local predictionTime = 0.1
    local predictedPos = root.Position + vel * predictionTime

    local dist = (predictedPos - rim.Position).Magnitude
    local aimOffset = computeArc(dist, moveDir)
    return rim.Position + aimOffset, predictedPos, dist
end

--// === Debug Line ===
local tracer = Drawing.new('Line')
tracer.Thickness = 2
tracer.Color = Color3.new(0, 1, 1)
tracer.Visible = false

RunService.RenderStepped:Connect(function()
    if not DebugMode or not selectedRim then
        tracer.Visible = false
        return
    end
    local aimPos, predictedPos = smartAim(selectedRim)
    local a, onA = Camera:WorldToViewportPoint(predictedPos)
    local b, onB = Camera:WorldToViewportPoint(aimPos)
    if onA and onB then
        tracer.From = Vector2.new(a.X, a.Y)
        tracer.To = Vector2.new(b.X, b.Y)
        tracer.Visible = true
    else
        tracer.Visible = false
    end
end)

--// === Shoot ===
local function shootAtTarget()
    if not (selectedRim and selectedRim:IsDescendantOf(workspace)) then
        return notify('❌ No Target', Color3.new(1, 0.3, 0.3))
    end
    if not shootKey then
        return notify('⚙️ Shoot Key Missing', Color3.new(1, 0.8, 0.3))
    end

    local char = plr.Character
    if not char then
        return
    end
    local head, root = char:FindFirstChild('Head'), char.PrimaryPart
    if not (head and root) then
        return
    end

    local aimPos, predictedPos, dist = smartAim(selectedRim)
    local dir = (aimPos - head.Position).Unit
    local shootFrom = root.Position + dir * 3.8
    if shootFrom.Y - root.Position.Y < 4 then
        shootFrom = root.Position + dir * 4
    end

    shootRemote:FireServer(aimPos, shootFrom, shootKey)
    notify('🏀 Shot Fired!', Color3.new(0, 1, 0))

    if LogMode then
        local data = {
            time = os.time(),
            dist = math.floor(dist * 10) / 10,
            arcY = math.floor((aimPos.Y - selectedRim.Position.Y) * 10) / 10,
            rootY = math.floor(predictedPos.Y * 10) / 10,
        }
        appendfile('ShotLogs.json', HttpService:JSONEncode(data) .. '\n')
    end
end

--// === Mouse Click Shoot ===
UserInputService.InputBegan:Connect(function(i, gp)
    if gp or not toggleOn then
        return
    end
    if i.UserInputType == Enum.UserInputType.MouseButton1 then
        shootAtTarget()
    end
end)

print('[🏀 Auto Aim Basketball] Debug + Calibration version loaded.')
print('[V] Toggle system | [O] Toggle dots | [B] Debug line | [L] Logging')
